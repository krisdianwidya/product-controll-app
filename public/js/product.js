/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*********************************!*\
  !*** ./resources/js/product.js ***!
  \*********************************/
eval("getProducts();\n\nfunction getProducts() {\n  $.get('/getproducts').done(function (data) {\n    $('#products').DataTable({\n      destroy: true,\n      data: data,\n      columns: [{\n        data: 'image',\n        render: function render(data) {\n          return \"<img src=\\\"/storage/assets/uploads/\".concat(data, \"\\\" class=\\\"img-fluid\\\" alt=\\\"...\\\">\");\n        },\n        orderable: false\n      }, {\n        data: 'name'\n      }, {\n        data: 'price'\n      }, {\n        data: 'description'\n      }, {\n        data: 'id',\n        render: function render(data) {\n          return \"<button class=\\\"btn btn-primary btn-edit\\\" data-id=\\\"\".concat(data, \"\\\" data-toggle=\\\"modal\\\" data-target=\\\"#update-product-modal\\\">Edit</button>\\n                            <button class=\\\"btn btn-danger btn-del\\\" data-id=\\\"\").concat(data, \"\\\">Delete</button>\");\n        }\n      }]\n    });\n  });\n}\n\nvar field = ['name', 'price', 'description', 'image']; // add data product\n\n$('#btn-add').on('click', function (e) {\n  e.preventDefault();\n  resetError();\n  Swal.showLoading();\n  var productData = new FormData();\n  productData.append('name', $('#name').val());\n  productData.append('price', $('#price').val());\n  productData.append('description', $('#description').val());\n  productData.append('image', $(\"#image\")[0].files[0]);\n  $.ajax({\n    url: \"/products\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    method: \"post\",\n    data: productData,\n    contentType: false,\n    processData: false\n  }).done(function () {\n    Swal.hideLoading();\n    $('#add-product-modal').removeClass('show');\n    Swal.fire('Success', 'Product has been inserted.', 'success');\n    $('.modal-backdrop').removeClass('show');\n    getProducts();\n  }).fail(function (error) {\n    Swal.hideLoading();\n    displayError(error);\n  });\n});\n\nfunction displayError(error) {\n  if (error) {\n    if (error.responseJSON.errors.name) {\n      $('#name').addClass('is-invalid');\n      $('#name-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.name[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.price) {\n      $('#price').addClass('is-invalid');\n      $('#price-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.price[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.description) {\n      $('#description').addClass('is-invalid');\n      $('#description-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.description[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.image) {\n      $('#image').addClass('is-invalid');\n      $('#image-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.image[0], \"</p>\"));\n    }\n  }\n}\n\nfunction resetError() {\n  for (var i = 0; i < field.length; i++) {\n    console.log(field[i]);\n\n    if ($(\"#\".concat(field[i])).hasClass('is-invalid')) {\n      $(\"#\".concat(field[i])).removeClass('is-invalid');\n      $(\"#\".concat(field[i], \"-error\")).html(\"\");\n    }\n  }\n} // end add data product\n// update data product\n\n\n$(document).on('click', function (e) {\n  if (e.target.classList.contains('btn-edit')) {\n    var productId = e.target.dataset.id;\n    $.get(\"/product/\".concat(productId)).done(function (data) {\n      $('#update-name').val(data.name);\n      $('#update-price').val(data.price);\n      $('#update-description').val(data.description);\n    }); // update data product\n\n    $('#btn-update').on('click', function (e) {\n      e.preventDefault();\n      resetErrorUpdate();\n      Swal.showLoading();\n      var productUpdateData = new FormData();\n      productUpdateData.append('name', $('#update-name').val());\n      productUpdateData.append('price', $('#update-price').val());\n      productUpdateData.append('description', $('#update-description').val());\n      productUpdateData.append('image', $(\"#update-image\")[0].files[0]);\n      $.ajax({\n        url: \"/product/\".concat(productId),\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        method: \"post\",\n        data: productUpdateData,\n        contentType: false,\n        processData: false\n      }).done(function (data) {\n        console.log(data);\n        Swal.hideLoading();\n        $('#update-product-modal').removeClass('show');\n        Swal.fire('Success', 'Product has been updated.', 'success');\n        $('.modal-backdrop').removeClass('show');\n        getProducts();\n      }).fail(function (error) {\n        Swal.hideLoading();\n        displayErrorUpdate(error);\n      });\n    });\n  }\n});\n\nfunction displayErrorUpdate(error) {\n  if (error) {\n    if (error.responseJSON.errors.name) {\n      $('#update-name').addClass('is-invalid');\n      $('#update-name-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.name[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.price) {\n      $('#update-price').addClass('is-invalid');\n      $('#update-price-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.price[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.description) {\n      $('#update-description').addClass('is-invalid');\n      $('#update-description-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.description[0], \"</p>\"));\n    }\n\n    if (error.responseJSON.errors.image) {\n      $('#update-image').addClass('is-invalid');\n      $('#update-image-error').append(\"<p class='m-0 text-danger'>\".concat(error.responseJSON.errors.image[0], \"</p>\"));\n    }\n  }\n}\n\nfunction resetErrorUpdate() {\n  for (var i = 0; i < field.length; i++) {\n    console.log(field[i]);\n\n    if ($(\"#update-\".concat(field[i])).hasClass('is-invalid')) {\n      $(\"#update-\".concat(field[i])).removeClass('is-invalid');\n      $(\"#update-\".concat(field[i], \"-error\")).html(\"\");\n    }\n  }\n} //end update data product\n//delete data product\n\n\n$(document).on('click', function (e) {\n  if (e.target.classList.contains('btn-del')) {\n    var productId = e.target.dataset.id;\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        $.ajax({\n          url: \"/product/\".concat(productId),\n          headers: {\n            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n          },\n          method: \"delete\"\n        }).done(function (data) {\n          console.log(data);\n          Swal.hideLoading();\n          Swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n          getProducts();\n        }).fail(function (error) {\n          Swal.hideLoading();\n          console.log(error);\n        });\n      }\n    });\n  }\n}); // end delete data product//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/product.js\n");
/******/ })()
;